"---------"
" Vundle  "
"---------"
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Required (has to be first)
Plugin 'gmarik/Vundle.vim'

" Colorschemes
Plugin 'jonathanfilip/vim-lucius'

" Completion
Plugin 'valloric/youcompleteme'

" Navigation
Plugin 'christoomey/vim-tmux-navigator'

" Status bar
Plugin 'itchyny/lightline.vim'
Plugin 'bling/vim-bufferline'

" Syntax coloring
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'potatoesmaster/i3-vim-syntax'       " i3 configuration
Plugin 'pangloss/vim-javascript'            " Javascript
"Plugin 'hdima/python-syntax'                " Python
Plugin 'vim-python/python-syntax'
Plugin 'rust-lang/rust.vim'                 " Rust 

" Syntax errors
Plugin 'w0rp/ale'
Plugin 'maximbaz/lightline-ale'

call vundle#end()
filetype plugin indent on

"--------"
" Editor "
"--------"
set formatoptions-=cro  " Disable automatic comment insertion
set fo+=t               " Auto-wrap text using textwidth
set number              " Display line numbers
set numberwidth=3       " Width of number column
set splitbelow          " Split (vertical)  new files below
set splitright          " Split (horizontal) new files right
set textwidth=80        " Width of the text

set t_ut=               " Use current background color
set t_Co=256            " Number of colors
syntax on               " Enable syntax highlighting
colorscheme lucius      " Select colorscheme
LuciusBlack             " Select colorscheme configuration

set hlsearch            " Highlight search queries
set ignorecase          " Enable case-insensitive search
set incsearch           " Find search query as it is typed

set cmdheight=1         " Set height of command window
set showcmd             " Shows current command being typed

set noeb vb t_vb=       " Disables all error bells/flashes

set shell=zsh           " Sets the shell

"-------------"
" Indentation "
"-------------"
set autoindent    " Copy indentation from previous line
set smartindent   " Insert an extra indentation

set expandtab     " Use spaces rather than tab
set shiftwidth=4  " Set indentation of '<<', '>>', and '=='
set softtabstop=4 " Replace tab with spaces

"------"
" Keys "
"------"
let mapleader=" " " Map the leader key to space

" Allow up/down movement for wrapped lines
noremap <buffer> <silent> j gj
noremap <buffer> <silent> k gk

" Disable highlighting
nnoremap <leader>h :nohl<CR>

"------------"
" Status Bar "
"------------"
set laststatus=2        " Display status line permanantly
let g:bufferline_echo=0 " Allow buffer_line plugin to work with lightline

" Configure status bar
" \   'right': [['syntastic', 'lineinfo'], ['percent']]

" Configure status bar
let g:lightline = {
    \ 'colorscheme': 'wombat',
    \
    \ 'active': {
    \   'left':  [['mode'], ['readonly'], ['bufferline']],
    \   'right': [['linter_errors', 'linter_warnings', 'linter_ok', 'lineinfo'], ['percent']]
    \ },
    \
    \ 'component_function': {
    \   'readonly':   'LightLineReadonly',
    \   'bufferline': 'LightLineBufferLine'
    \ },
    \
    \ 'component_visible_condition': {
    \   'readonly': '(&filetype!="help"&& &readonly)',
    \ },
    \
    \ 'component_expand': {
    \   'linter_warnings': 'lightline#ale#warnings',
    \   'linter_errors': 'lightline#ale#errors',
    \   'linter_ok': 'lightline#ale#ok',
    \ },
    \
    \ 'component_type': {
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error',
    \   'linter_ok': 'left',
    \ },
    \
    \ 'separator': { 'left': '', 'right': '' },
    \ 'subseparator': { 'left': '|', 'right': '|' }
    \ }

" Display read-only status indicator
function! LightLineReadonly()
    if &filetype == "help"
        return ""
    elseif &readonly
        return "RO"
    else
        return ""
    endif
endfunction

" Display buffer_line plugin information
function! LightLineBufferLine()
    call g:bufferline#refresh_status()
    let b = g:bufferline_status_info.before
    let c = g:bufferline_status_info.current
    let a = g:bufferline_status_info.after
    return b . c. a
endfunction

"------------"
" Completion "
"------------"
let g:ycm_show_diagnostics_ui=0                 " Enable Syntantic to work
let g:ycm_python_binary_path='/usr/bin/python3' " Enable Python3 completion

"---------"
" Linting "
"---------"
let g:ale_lint_on_text_changed = 'never'    " Lint only on file open/save

""""" TESTING """"""
" let g:ale_completion_enabled = 1
" let g:ale_linters = {
" \   'python': ['pyls'],
" \}


"--------------"
" Highlighting "
"--------------"
augroup vimrc_todo
    au!
    au Syntax * syn match MyTodo /\v<(FIXME|NOTE|TODO|OPTIMIZE|XXX)/
                      \ containedin=.*Comment,vimCommentTitle
augroup END
hi def link MyTodo Todo

let g:python_highlight_all = 1

"------------"
" Languagues "
"------------"
"let g:rustfmt_autosave = 1
au BufRead,BufNewFile *.tpp setlocal filetype=cpp
