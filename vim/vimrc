"---------"
" Vundle  "
"---------"
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Required (has to be first)
Plugin 'gmarik/Vundle.vim'

" Colorschemes
Plugin 'flazz/vim-colorschemes'

" Completion (Installed from apt)
Plugin 'valloric/youcompleteme'

" Navigation
Plugin 'christoomey/vim-tmux-navigator'

" Status bar
Plugin 'itchyny/lightline.vim'
Plugin 'bling/vim-bufferline'

" Syntax coloring
Plugin 'justinmk/vim-syntax-extra'        " C
Plugin 'octol/vim-cpp-enhanced-highlight' " C++
Plugin 'fatih/vim-go'                     " Golang
Plugin 'potatoesmaster/i3-vim-syntax'     " i3 configuration
Plugin 'hdima/python-syntax'              " Python

" Syntax errors
Plugin 'scrooloose/syntastic'

call vundle#end()
filetype plugin indent on

"--------"
" Editor "
"--------"
set formatoptions-=o " Disable automatic comment insertion for 'o/O'
set formatoptions-=r " Disable automatic comment insertion
set fo+=t            " Auto-wrap text using textwidth
set number           " Display line numbers
set numberwidth=3    " Width of number column
set textwidth=80     " Width of the text

set t_ut=            " Use current background color
set t_Co=256         " Number of colors
syntax on            " Enable syntax highlighting
colorscheme lucius   " Select colorscheme
LuciusBlack          " Select colorscheme configuration

set hlsearch         " Highlight search queries
set ignorecase       " Enable case-insensitive search
set incsearch        " Find search query as it is typed

set cmdheight=1      " Set height of command window
set showcmd          " Shows current command being typed

set noeb vb t_vb=    " Disables all error bells/flashes

"-------------"
" Indentation "
"-------------"
set autoindent    " Copy indentation from previous line
set smartindent   " Insert an extra indentation

set expandtab     " Use spaces rather than tab
set shiftwidth=4  " Set indentation of '<<', '>>', and '=='
set softtabstop=4 " Replace tab with spaces

"------"
" Keys "
"------"
let mapleader=" " " Map the leader key to space

" Allow up/down movement for wrapped lines
noremap <buffer> <silent> j gj
noremap <buffer> <silent> k gk

" Disable highlighting
nnoremap <leader>h :nohl<CR>

"------------"
" Status Bar "
"------------"
set laststatus=2        " Display status line permanantly
let g:bufferline_echo=0 " Allow buffer_line plugin to work with lightline

" Configure status bar
let g:lightline = {
  \ 'colorscheme': 'wombat',
  \
  \ 'active': {
  \   'left':  [['mode'], ['readonly'], ['bufferline']],
  \   'right': [['syntastic', 'lineinfo'], ['percent']]
  \ },
  \
  \ 'component_function': {
  \   'readonly':   'LightLineReadonly',
  \   'bufferline': 'LightLineBufferLine'
  \ },
  \
  \ 'component_visible_condition': {
  \   'readonly': '(&filetype!="help"&& &readonly)',
  \ },
  \
  \ 'component_expand': {
  \   'syntastic': 'SyntasticStatuslineFlag',
  \ },
  \
  \ 'component_type': {
  \   'syntastic': 'error',
  \ },
  \
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '|', 'right': '|' }
  \ }

" Display read-only status indicator
function! LightLineReadonly()
    if &filetype == "help"
        return ""
    elseif &readonly
        return "RO"
    else
        return ""
    endif
endfunction

" Display buffer_line plugin information
function! LightLineBufferLine()
    let st=g:bufferline#refresh_status()
    return g:bufferline_status_info.before . g:bufferline_status_info.current . g:bufferline_status_info.after
endfunction

" Display syntastic plugin errors
function! s:LightLineSyntastic()
  SyntasticCheck
  call lightline#update()
endfunction

"------------"
" Completion "
"------------"
let g:ycm_show_diagnostics_ui=0                 " Enable Syntantic to work
let g:ycm_python_binary_path='/usr/bin/python3' " Enable Python3 completion
let g:ycm_global_ycm_extra_conf='/home/potok/.vim/bundle/youcompleteme/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

"------------"
" Correction "
"------------"
let g:syntastic_always_populate_loc_list=1 " Load errors into the location list
let g:syntastic_check_on_open=1            " Check for errors when opening
let g:syntastic_mode_map = { 'mode': 'passive' }

" Enable syntastic for status bar on reads/writes
augroup AutoSyntastic
  autocmd!
  autocmd BufReadPost,FileReadPost *.c,*.cpp,*.py,*.go,*.sh call s:LightLineSyntastic()
  autocmd BufWritePost *.c,*.cpp,*.py,*.go,*.sh call s:LightLineSyntastic()
augroup END
