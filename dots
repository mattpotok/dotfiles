#!/bin/sh
#
# Utilities for setting up a fresh *nix image.

########################################
# Global variables
########################################
# Canonical path to `dots` script directory
DIR=$(cd -P -- "$(dirname -- "$0")" && printf '%s\n' "$(pwd -P)")

PM=""  # Package Manager


########################################
# Determine the package manager
# Globals
#  PM
########################################
get_package_manager() {
    if [ -n $(which apt) ]; then
        PM="apt"
    elif [ -n $(which brew) ]; then
        PM="brew"
    elif [ -n $(which yum) ]; then
        PM="yum"
    fi
}

########################################
# Update system packages
# Globals
#  PM
########################################
# TODO verify these
update_system() {
    if [ "$PM" = "apt" ]; then
        sudo apt update && sudo apt upgrade -y
    elif [ "$PM" = "brew" ]; then
        brew update && brew upgrade
    elif [ "$PM" = "yum" ]; then
        sudo yum update
    fi
}

########################################
# Print usage for `dots`
# Outputs:
#   Writes `dots` usage to stdout
########################################
usage() {
cat <<'USAGE'
Usage: sudo dots [-h | --help] <comand> [<args>]

Commands:
  install           Install software
                    
Optional arguments:
  -h, --help        Prints this message and exits
USAGE
}

########################################
# Print usage for `dots install`
# Outputs:
#   Writes `dots` usage to stdout
########################################
usage_install() {
cat <<'USAGE'
Usage: sudo dots install [--all] [--clang] [--code] [--general] [-h | --help]
                         [--i3] [--python] [--neovim] [--rust] [--vim] [--tmux]
                         [--zsh]

Optional arguments:
      --all         All packages
      --clang       C/C++ packages
      --code        Software development packages
      --general     General purpose packages
  -h, --help        Prints this messages and exits
      --i3          I3 window manager 
      --python      Python3 packages
      --neovim      NeoVim and plugins
      --rust        Rust packages
      --tmux        Tmux configuration
      --vim         Vim and plugins
      --zsh         ZSH shell

USAGE
}

########################################
# Install clang
# Globals
#   PM
########################################
install_clang() {
    if [ "$PM" = "apt" ]; then
        sudo apt install -y build-essential clang clang-tools clangd cmake gdb valgrind
    fi
}

########################################
# Install development related packages
# Globals
#   PM
########################################
install_code() {
    if [ "$PM" = "apt" ]; then
        sudo apt install -y git
    fi
}

########################################
# Install general purpose packages
# Globals
#   PM
########################################
install_general() {
    if [ "$PM" = "apt" ]; then
        sudo apt install -y keychain feh vlc
    fi
}

########################################
# Install i3wm
# Globals
#   DIR
#   PM
########################################
install_i3() {
    if [ "$PM" = "apt" ]; then
        sudo apt install -y arandr i3 i3blocks xautolock xbacklight xorg
    else
        return
    fi

    # Copy configuration files
    cp $DIR/config/i3/config $HOME/.config/i3/config
    cp $DIR/config/i3blocks/config $HOME/.config/i3blocks/config

    cp $DIR/config/xorg/xinitrc $HOME/.xinitrc
    cp $DIR/config/xorg/Xresources $HOME/.Xresources
    sudo cp $DIR/config/xorg/keyboard /etc/default/keyboard

    cp $DIR/config/zsh/zprofile $HOME/.zprofile

    # Configure lock screen
    cp $DIR/bin/lockscreen $HOME/.local/bin
    sudo sh -c \
        "sed 's/{user}/'\"$USER\"'/g' $DIR/config/systemd/lockscreen.service > \
        /etc/systemd/system/lockscreen.service"
    sudo systemctl enable lockscreen.service
}

########################################
# Install Python
# Globals
#   DIR
#   PM
########################################
install_python() {
    if [ "$PM" = "apt" ]; then
        sudo apt install -y python3-dev
    else
        return
    fi

    python3 -m pip install 'python-language-server[all]'
}

########################################
# Install NeoVim
# Globals
#   DIR
#   PM
########################################
install_neovim() {
    if [ "$PM" = "apt" ]; then
        sudo apt install -y neovim
    else
        return
    fi

    mkdir -p $HOME/.config/nvim
    cp $DIR/config/nvim/init.vim $HOME/.config/nvim/init.vim
    nvim +PlugInstall +qall
}

########################################
# Install Rust
# Globals
#   PM
########################################
# TODO debug this
install_rust () {
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    rustup update 

    curl -L https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/rust-analyzer-linux -o ~/.local/bin/rust-analyzer
    chmod +x ~/.local/bin/rust-analyzer
}

########################################
# Install Tmux
# Globals
#   DIR
#   PM
########################################
install_tmux() {
    if [ "$PM" = "apt" ]; then
        sudo apt install -y tmux
    else
        return
    fi

    cp $DIR/config/tmux/tmux.conf $HOME/.tmux.conf
}

########################################
# Install Vim
# Globals
#   DIR
#   PM
########################################
install_vim() {
    if [ "$PM" = "apt" ]; then
        sudo apt install -y vim
    else
        return
    fi

    cp $DIR/vim/vimrc $HOME/.vim/vimrc 
    vim +PlugInstall +qall
}

########################################
# Install ZSH
# Globals
#   DIR
#   PM
########################################
install_zsh() {
    if [ "$PM" = "apt" ]; then
        sudo apt install -y zsh
    else
        return
    fi

    cp $DIR/zsh/zshenv $HOME/.zshenv
    cp $DIR/zsh/zshrc $HOME/.zshrc 

    rm $HOME/.bash* 2> /dev/null
    rm $HOME/.profile 2> /dev/null

    chsh -s $(which zsh)
}

########################################
# Main - parse options and execute commands
# Globals:
#   PM
########################################
main() {
    # Initialize variables
    local help=false

    # Parse options for `dots`
    while [ $(expr match "$1" "^-") -eq 1 ]; do
        case "$1" in
            -h | --help )
                help=true
                ;;
            * )
                echo "dots: invalid option: $1"
                usage
                exit 1
                ;;
        esac
        shift
    done

    # Check if no options or help option
    if [ -z $1 ] || [ "$help" = true ]; then
        usage
        exit 0
    fi

    # Initialize `install` variables
    local install_clang=false
    local install_code=false
    local install_general=false
    local install_i3=false
    local install_python=false
    local install_neovim=false
    local install_rust=false
    local install_tmux=false
    local install_vim=false
    local install_zsh=false

    # Parse options for command
    command=$1; shift
    case "$command" in
        install )
            # Check for options
            if [ -z $1 ]; then
                usage_install
                exit 1
            fi

            # Parse options for `dots install`
            while [ -n "$1" ]; do
                case "$1" in
                    --all )
                        install_clang=true
                        install_code=true
                        install_general=true
                        install_i3=true
                        install_python=true
                        install_neovim=true
                        install_rust=true
                        install_tmux=true
                        install_vim=true
                        install_zsh=true
                        ;;

                    --clang )
                        install_clang=true
                        ;;

                    --code )
                        install_code=true
                        ;;

                    -h | --help )
                        help=true
                        ;;

                    --general )
                        install_general=true
                        ;;

                    --i3 )
                        install_i3=true
                        ;;

                    --python )
                        install_python=true
                        ;;

                    --neovim )
                        install_neovim=true
                        ;;

                    --tmux )
                        install_tmux=true
                        ;;

                    --vim )
                        install_vim=true
                        ;;

                    --zsh )
                        install_zsh=true
                        ;;

                    * )
                        echo "dots install: invalid option: $1"
                        usage_install
                        exit 1
                        ;;
                esac
                shift
            done

            ;;

        * )
            echo "dots: invalid command: $command"
            usage
            exit 1
            ;;
    esac

    # Execute command
    if [ "$command" = "install" ]; then
        if [ "$help" = true ]; then
            usage_install
            exit 0
        fi

        get_package_manager
        update_system

        [ "$install_clang" = true ]   && install_clang
        [ "$install_code" = true ]    && install_code
        [ "$install_general" = true ] && install_general
        [ "$install_i3" = true ]      && install_i3
        [ "$install_python" = true ]  && install_python
        [ "$install_neovim" = true ]  && install_neovim
        [ "$install_rust" = true ]    && install_rust
        [ "$install_tmux" = true ]    && install_tmux
        [ "$install_vim" = true ]     && install_vim
        [ "$install_zsh" = true ]     && install_zsh
    fi
}

main "$@"
