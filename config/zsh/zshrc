########################################
# Aliases #
########################################
# Directory
alias ds='dirs -v'      # Alias director stack
alias mkdir='mkdir -p'  # Create parent by default

# 'ls' family
alias ls='ls -h --color --group-directories-first'  # Add color to ls
alias ll='ls -lv --group-directories-first'         # Informative
alias la='ls -A'                                    # Show hidden files
alias lr='ll -R'                                    # Recursive ls.

alias lx='ls -lXB'  # Sort by extension.
alias lk='ls -lSr'  # Sort by size, biggest last.
alias lt='ls -ltr'  # Sort by date, recent last.
alias lc='ls -ltcr' # Sort by change time, recent last.
alias lu='ls -ltur' # Sort by access time, recent last.

# Typos
alias ch='cd' # 'cd' typo
alias gd='cd' # 'cd' typo
alias sl='ls' # 'ls' typo

# Utilities
alias du='du -kh'   # Print readable output.
alias df='df -kTh'  # Print readable output  
alias vi='vim'      # Use vim rather than Vi


########################################
# Directory
########################################
DIRSTACKSIZE=16           # Set the directory stack size

setopt AUTO_CD            # 'cd' without the cd
setopt AUTO_PUSHD         # Automatically push 'cds' unto stack
setopt PUSHD_IGNORE_DUPS  # Prevent duplicates from being pushed
setopt PUSHD_MINUS        # Swap meanings of '-' and '+'
setopt PUSHD_SILENT       # Push silently unto the stack
setopt PUSHD_TO_HOME      # Allow $HOME to be pushed


########################################
# Functions #
########################################
# `cd` into a project
function cdp() {
    result=$(cdp_helper $@)
    exit_code=$?

    if [ $exit_code -ne 0 ]; then
        echo $result
    fi

    cd $result
}

# Return branch of the repository if it exists
function _parse_git_branch() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    echo "("${ref#refs/heads/}")"
}

# Extract compressed files
function extract() {
    if [ -f $1 ]; then
        case $1 in 
            *.tar.bz2)  tar xvjf $1    ;;
            *.tar.gz)   tar xvzf $1    ;;
            *.bz2)      bunzip2 $1     ;;
            *.rar)      unrar x $1     ;;
            *.gz)       gunzip $1      ;;
            *.tar)      tar xvf $1     ;;
            *.tgz)      tar xvzf $1    ;;
            *.zip)      unzip $1       ;;
            *.Z)        uncompress $1  ;;
            *.7z)       7z x $1        ;;
            *)          echo "Don't know how to extract '$1'..."  ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# Generate ssh-key
function gen_sshkey() {
    # Generate passphrase
    local passphrase=$(tr -dc A-Za-z0-9 < /dev/urandom | head -c 16 | xargs)
    echo $passphrase >> passphrase.txt

    #Generate key
    ssh-keygen -o -a 100 -t ed25519 -C "potok@mattpotok.com" -f "$HOME/.ssh/id_ed25519" -P $passphrase
}

# Get IP address
function getip() {
    in_ip=$(hostname -I | cut -d' ' -f1)
    ex_ip=$(wget http://ipinfo.io/ip -qO -)

    echo "internal ip: ${in_ip}"
    echo "external ip: ${ex_ip}"
}

# Make and cd into a directory
function mkcd() {
    mkdir -p $1
    cd $1
}

# Create archives
function mkrar() { rar a    "${1%%/}.rar"     "${1%%/}/"; }
function mktar() { tar cvf  "${1%%/}.tar"     "${1%%/}/"; }
function mktgz() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }
function mktbz() { tar cvjf "${1%%/}.tar.bz2" "${1%%/}/"; }
function mkzip() { zip -r   "${1%%/}.zip"     "${1%%/}/"; }


########################################
# History
########################################
HISTFILE=~/.histfile        # History file location 
HISTSIZE=10000              # History size
SAVEHIST=10000              # History size

setopt HIST_IGNORE_ALL_DUPS # Prevent duplicates by removing older repeats
setopt HIST_IGNORE_SPACE    # Ignore all commands starting with a space
setopt HIST_REDUCE_BLANKS   # Remove superfluous blanks from command


########################################
# Key bindings
########################################
bindkey -v                            # Enable Vi keybindings
bindkey -v '^?' backward-delete-char  # Normal deletion


########################################
# Modules
########################################
autoload -Uz colors compinit
colors
compinit


########################################
# Prompt
########################################
fgbk="$fg_bold[black]"
fgbl="$fg_bold[blue]"
fgbg="$fg_bold[green]"
fgc="$fg_no_bold[cyan]"
fgg="$fg_no_bold[green]"

PROMPT="%{$fgbk%}[%{$fgc%}%n%{$fgbk%}@%{$fgc%}%m%{$fgbk%}: \
%{$fgbl%}%1~%{$fgbk%}]%{$fgbg%}\$(_parse_git_branch)%b%{$reset_color%}$ "

setopt PROMPT_SUBST


########################################
# Usability
########################################
setopt ALWAYS_TO_END    # Move cursor to end after completion
setopt COMPLETE_IN_WORD # Enable mid-word completion
setopt CORRECT          # Correct the spelling of commands
setopt CORRECT_ALL      # Correct the spelling of all arguments
setopt DVORAK           # Set keyboard for spelling
setopt EXTENDED_GLOB    # Treat '#', '~', and '^' as part of path
setopt MULTIOS          # Allow for multiple redirection
                        
setopt NO_BEEP          # Disable beeping
setopt NO_CASE_GLOB     # Case insensitive globbing
setopt NO_FLOW_CONTROL  # Reclaim ^S/^Q

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # Case insensitive
 

########################################
# Welcome
########################################
if [ -x "$(command -v upspan)" ]; then
    up="$fg_bold[blue]Uptime:\t\t$fg_bold[green]`upspan`"
fi

clear
echo -e "$fg_bold[cyan]                                 .--.      "
echo -e "$fg_bold[cyan] ____    ___  _______           |o_o |     "
echo -e "$fg_bold[cyan]|___ \  /   ||____  /           |:_/ |     "
echo -e "$fg_bold[cyan] | |\ \/ /| | ___/ /           //   \ \    "
echo -e "$fg_bold[cyan] | | \_\/ | ||____/           (|     | )   "
echo -e "$fg_bold[cyan] | |      | |                /'\_   _/\`\  "
echo -e "$fg_bold[cyan] |_|      |_|                \___)=(___/  \n"
echo -e "$fg_bold[blue]Today is:\t$fg_bold[green]`date`";
echo -e "$fg_bold[blue]Kernel info:\t$fg_bold[green]`uname -smr`"
[ ${up+.} ] && echo -e "$up"
echo -e "$fg_no_bold[green]"

if [ -n $(which keychain) ]; then
    eval $(keychain --eval --nocolor --quiet id_ed25519) # Start keychain
fi
